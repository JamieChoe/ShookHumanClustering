install.packages('umap')
# UMAP plot (multi-dimensional scaling)
library(umap)
dat <- dat[!duplicated(dat), ] # first remove duplicates
par(mar=c(3,3,2,6), xpd=TRUE, cex.main=1.5)
ump <- umap(t(dat), n_neighbors = 15, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=15", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=groups, pch=20,
col=1:length(groups), title="Group", pt.cex=1.5)
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
install.packages('R.utils')
install.packages('umap')
#   Differential expression analysis with DESeq2
library(DESeq2)
library(R.utils)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE213092", "file=GSE213092_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- paste0("00000000000000000000000000000000000000000000000011",
"111111111111111111111111111111111111111111111111")
sml <- strsplit(gsms, split="")[[1]]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("Young","Old"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="Wald", sfType="poscount")
# Version info: R 4.2.2, Biobase 2.58.0, GEOquery 2.66.0, limma 3.54.0
################################################################
install.packages('R.utils')
install.packages('umap')
#   Differential expression analysis with DESeq2
library(DESeq2)
library(R.utils)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE213092", "file=GSE213092_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- paste0("00000000000000000000000000000000000000000000000011",
"111111111111111111111111111111111111111111111111")
sml <- strsplit(gsms, split="")[[1]]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("Young","Old"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="Wald", sfType="poscount")
# extract results for top genes table
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","stat","log2FoldChange","baseMean","Symbol","Description"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
plotDispEsts(ds, main="GSE213092 Dispersion Estimates")
# create histogram plot of p-values
hist(r$padj, breaks=seq(0, 1, length = 21), col = "grey", border = "white",
xlab = "", ylab = "", main = "GSE213092 Frequencies of padj-values")
# volcano plot
old.pal <- palette(c("#00BFFF", "#FF3030")) # low-hi colors
par(mar=c(4,4,2,1), cex.main=1.5)
plot(r$log2FoldChange, -log10(r$padj), main=paste(groups[1], "vs", groups[2]),
xlab="log2FC", ylab="-log10(Padj)", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log2FoldChange, -log10(padj), pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
# MD plot
par(mar=c(4,4,2,1), cex.main=1.5)
plot(log10(r$baseMean), r$log2FoldChange, main=paste(groups[1], "vs", groups[2]),
xlab="log10(mean of normalized counts)", ylab="log2FoldChange", pch=20, cex=0.5)
with(subset(r, padj<0.05 & abs(log2FoldChange) >= 0),
points(log10(baseMean), log2FoldChange, pch=20, col=(sign(log2FoldChange) + 3)/2, cex=1))
legend("bottomleft", title=paste("Padj<", 0.05, sep=""), legend=c("down", "up"), pch=20,col=1:2)
abline(h=0)
palette(old.pal) # restore palette
################################################################
#   General expression data visualization
dat <- log10(counts(ds, normalized = T) + 1) # extract normalized counts
# box-and-whisker plot
lbl <- "log10(raw counts + 1)"
dev.new(width=3 + ncol(tbl) / 6, height=5)
ord <- order(gs)  # order samples by group
palette(c("#1B9E77", "#7570B3", "#E7298A", "#E6AB02", "#D95F02",
"#66A61E", "#A6761D", "#B32424", "#B324B3", "#666666"))
par(mar=c(7,4,2,1))
boxplot(dat[,ord], boxwex=0.6, notch=T, main="GSE213092", ylab="lg(norm.counts)", outline=F, las=2, col=gs[ord])
legend("topleft", groups, fill=palette(), bty="n")
dev.off()
# UMAP plot (multi-dimensional scaling)
library(umap)
dat <- dat[!duplicated(dat), ] # first remove duplicates
par(mar=c(3,3,2,6), xpd=TRUE, cex.main=1.5)
ump <- umap(t(dat), n_neighbors = 15, random_state = 123)
plot(ump$layout, main="UMAP plot, nbrs=15", xlab="", ylab="", col=gs, pch=20, cex=1.5)
legend("topright", inset=c(-0.15,0), legend=groups, pch=20,
col=1:length(groups), title="Group", pt.cex=1.5)
View(tT)
library(DESeq2)
library(tidyverse)
library(airway)
install.packages(airway)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.20")
install.packages(airway)
BiocManager::install("airway")
library(airway)
counts_data = read.csv('RawCountsData.tsv')
cd
pwd
getwd
counts_data = read.csv('RawCountsData.tsv')
head(counts_data)
View(counts_data)
View(counts_data)
View(annot)
counts <- read.delim("RawCountsData.tsv")
View(counts_data)
reqPkg = c("data.table", "Matrix", "hdf5r", "reticulate", "ggplot2",
"gridExtra", "glue", "readr", "RColorBrewer", "R.utils", "Seurat")
newPkg = reqPkg[!(reqPkg %in% installed.packages()[,"Package"])]
if(length(newPkg)){install.packages(newPkg)}
devtools::install_github("the-ouyang-lab/ShinyCell2")
install.packages("shinyhelper")
install.packages('DT')
install.packages('ggdendro')
install.packages('rliger')
install.packages("qs")
remotes::install_github("mojaveazure/seurat-disk")
install.packages("reticulate")
install.packages('anndata')
library(Seurat)
library(ShinyCell2)
library(rliger)
library(scCustomize)
library(qs)
library(SeuratDisk)
library(reticulate)
library(anndata)
Merged_Donors <- readRDS("~/Desktop/PracticeRNA/jamie_project/Merged_Donors/Merged_Donors.rds")
seu = Merged_Donors
DefaultAssay(seu) <- "SCT"
# Ensure variable features are set
if (length(VariableFeatures(seu)) == 0) {
seu <- FindVariableFeatures(seu)
}
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- factor(seu$celltype)
seu@meta.data$celltype <- cluster_labels[as.character(seu$seurat_clusters)]
seu$celltype <- factor(seu$celltype)
# Build config
scConf <- createConfig(seu)
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "shinyApp/",
gex.assay = "SCT"
)
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
FindVariableFeatures(seu)
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
#Adding these labels to a cluster called cell type
seu@meta.data$celltype <- cluster_labels[as.character(seu$seurat_clusters)]
seu$celltype <- factor(seu$celltype)
# Build config
scConf <- createConfig(seu)
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
scConf$gex.assay <- "SCT"
scConf$gex.slot <- "data"
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
seu = Merged_Donors
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
# Prep object
DefaultAssay(seu) <- "SCT"
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu@meta.data$celltype <- cluster_labels[as.character(seu$seurat_clusters)]
seu$celltype <- factor(seu$celltype)
# Build config
scConf <- createConfig(seu)
scConf$gex.assay <- "SCT"
scConf$gex.slot <- "data"
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
dim(GetAssayData(seu, assay = "SCT", slot = "data"))
dim(GetAssayData(seu, assay = "SCT", slot = "data"))
seu = Merged_Donors
DefaultAssay(seu) <- "SCT"
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
if (length(VariableFeatures(seu)) == 0) {
seu <- FindVariableFeatures(seu)
}
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- factor(seu$celltype)
seu@meta.data$celltype <- cluster_labels[as.character(seu$seurat_clusters)]
seu$celltype <- factor(seu$celltype)
# Build config
scConf <- createConfig(seu)
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
reqPkg = c("data.table", "Matrix", "hdf5r", "reticulate", "ggplot2",
"gridExtra", "glue", "readr", "RColorBrewer", "R.utils", "Seurat")
newPkg = reqPkg[!(reqPkg %in% installed.packages()[,"Package"])]
if(length(newPkg)){install.packages(newPkg)}
devtools::install_github("the-ouyang-lab/ShinyCell2")
library(ShinyCell2)
seu = Merged_Donors
DefaultAssay(seu) <- "SCT"
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
# Build config
scConf <- createConfig(seu)
scConf$gex.assay <- "SCT"
scConf$gex.slot <- "data"
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
seu@assays$SCT@data
dim(GetAssayData(seu, assay = "SCT", slot = "data"))
makeShinyCodes(
shiny.title = "All Cells Shiny App",
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
shiny.footnotes = NULL
)
setwd("/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp")
shiny::runApp()
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
class(GetAssayData(seu, assay = "SCT", slot = "data"))
# Extract dense matrix from sparse
expr_mat_dense <- as.matrix(GetAssayData(seu, assay = "SCT", slot = "data"))
# Replace the 'data' slot with dense matrix temporarily
seu[["SCT"]]@data <- expr_mat_dense
# Now create config and make files
scConf <- createConfig(seu)
makeShinyFiles(seu, scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT",
assay.slot = "data")
scConf$gene.info
# === Load libraries ===
library(Seurat)
library(ShinyCell2)
library(dplyr)
# === Load your Seurat object ===
seu <- Merged_Donors
# === Set default assay to SCT ===
DefaultAssay(seu) <- "SCT"
# === Make sure variable features are set ===
if (length(VariableFeatures(seu)) == 0) {
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
}
# === Add cell type labels ===
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- factor(cluster_labels[as.character(seu$seurat_clusters)])
seu$celltype <- dplyr::recode(
as.character(seu$seurat_clusters),
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- factor(seu$celltype)
# === Ensure assay slot is a dense matrix (dgCMatrix causes chunk_dims error) ===
assay_data <- GetAssayData(seu, assay = "SCT", slot = "data")
if (inherits(assay_data, "dgCMatrix")) {
message("Converting sparse matrix to dense matrix...")
seu[["SCT"]]@data <- as.matrix(assay_data)
}
# === Create ShinyCell config ===
scConf <- createConfig(seu)
# === CRITICAL: Ensure gene.info is populated ===
if (nrow(scConf$gene.info) == 0) {
message("Manually setting gene.info from variable features...")
hvg <- head(VariableFeatures(seu), 1000)
scConf$gene.info <- data.frame(
gene = hvg,
default.plot = FALSE,
stringsAsFactors = FALSE
)
}
if (is.null(scConf$gene.info) || nrow(scConf$gene.info) == 0) {
message("Manually setting gene.info from variable features...")
hvg <- head(VariableFeatures(seu), 1000)
scConf$gene.info <- data.frame(
gene = hvg,
default.plot = FALSE,
stringsAsFactors = FALSE
)
}
if (is.null(scConf$gene.info) || nrow(scConf$gene.info) == 0) {
message("Manually setting gene.info from variable features...")
hvg <- head(VariableFeatures(seu), 1000)
# Replace existing data.table with a new data.table
scConf$gene.info <- data.table::data.table(
gene = hvg,
default.plot = FALSE
)
}
library(Seurat)
library(ShinyCell2)
library(dplyr)
library(data.table)
# ---- Load Seurat object ----
seu <- Merged_Donors
DefaultAssay(seu) <- "SCT"
# ---- Ensure variable features ----
if (length(VariableFeatures(seu)) == 0) {
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
}
# ---- Add cell type labels ----
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- dplyr::recode(as.character(seu$seurat_clusters), !!!cluster_labels)
seu$celltype <- factor(seu$celltype)
# ---- Convert sparse matrix to dense if needed ----
if (inherits(GetAssayData(seu, assay = "SCT", slot = "data"), "dgCMatrix")) {
seu[["SCT"]]@data <- as.matrix(GetAssayData(seu, assay = "SCT", slot = "data"))
}
# ---- Generate clean gene info ----
hvgs <- head(VariableFeatures(seu), 1000)
gene_info <- data.table::data.table(
gene = hvgs,
default.plot = FALSE
)
# ---- Create config object and inject clean gene info ----
scConf <- createConfig(seu)
scConf$gene.info <- gene_info
str(scConf)
seu = Merged_Donors
DefaultAssay(seu) <- "SCT"
# Prep object
DefaultAssay(seu) <- "SCT"
# Ensure variable features are set
if (length(VariableFeatures(seu)) == 0) {
seu <- FindVariableFeatures(seu)
}
seu <- FindVariableFeatures(seu, assay = "SCT", selection.method = "vst", nfeatures = 2000)
cluster_labels <- c(
"0" = "Keratinocyte 1",
"1" = "Keratinocyte 2",
"2" = "Fibroblast",
"3" = "Myeloid",
"4" = "Lymphoid",
"5" = "Mast",
"6" = "Endothelial",
"7" = "Pericyte",
"8" = "Melanocyte"
)
seu$celltype <- factor(seu$celltype)
seu@meta.data$celltype <- cluster_labels[as.character(seu$seurat_clusters)]
seu$celltype <- factor(seu$celltype)
# Build config
scConf <- createConfig(seu)
# Make shiny files
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
scConf$gex.assay <- "SCT"
scConf$gex.slot <- "data"
makeShinyFiles(
seu,
scConf,
shiny.prefix = "sc1",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp",
gex.assay = "SCT"
)
# Build config
scConf <- createConfig(seu, default.assay = "SCT")
makeShinyApp(seu, scConf,
gene.mapping = TRUE,
gex.assay = "SCT",
shiny.title = "All Cells Shiny App",
shiny.dir = "/Users/jamiechoe/Desktop/PracticeRNA/jamie_project/shinyApp")
